(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{190:function(e,t,n){"use strict";n.r(t);var a=n(0),o=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"consensus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#consensus","aria-hidden":"true"}},[e._v("#")]),e._v(" Consensus")]),e._v(" "),n("p",[e._v("Crypto.com Chain prototype uses Tendermint Core as its consensus algorithm.")]),e._v(" "),n("p",[e._v("It utilizes the ABCI (Application BlockChain Interface).")]),e._v(" "),n("p",[e._v('This allows "plugging" custom applications with Tendermint.')]),e._v(" "),n("p",[e._v("If the application is written in Go, it can be linked directly; if it's written in other languages, it communicates over 3 TCP or Unix sockets.")]),e._v(" "),n("p",[e._v("The details of this interface can be found on: "),n("a",{attrs:{href:"https://tendermint.com/docs/spec/abci/abci.html#overview",target:"_blank",rel:"noopener noreferrer"}},[e._v("tendermint.com/docs/spec/abci/abci.html"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("As Crypto.com Chain Core code is written in Rust, we utilize (and aim to continually improve) the "),n("a",{attrs:{href:"https://github.com/tendermint/rust-abci/",target:"_blank",rel:"noopener noreferrer"}},[e._v("rust-abci"),n("OutboundLink")],1),e._v(" library.")]),e._v(" "),n("p",[e._v("What is executed when by the consensus engine and by the ABCI application can be seen in "),n("a",{attrs:{href:"https://blog.cosmos.network/tendermint-in-a-nutshell-39d9f7f66ad7",target:"_blank",rel:"noopener noreferrer"}},[e._v("this diagram"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"client-interacting-with-the-blockchain"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#client-interacting-with-the-blockchain","aria-hidden":"true"}},[e._v("#")]),e._v(" Client: Interacting with the blockchain")]),e._v(" "),n("p",[e._v("To query a blockchain or submit a transaction, one can use the Tendermint RPC for that.")]),e._v(" "),n("p",[e._v("The details of the RPC mechanism can be found on: "),n("a",{attrs:{href:"https://tendermint.com/rpc/#introduction",target:"_blank",rel:"noopener noreferrer"}},[e._v("tendermint.com/rpc/"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("Currently, it supports 3 methods:")]),e._v(" "),n("ol",[n("li",[e._v("URI over HTTP")]),e._v(" "),n("li",[e._v("JSON-RPC over HTTP")]),e._v(" "),n("li",[e._v("JSON-RPC over WebSockets")])]),e._v(" "),n("p",[e._v("The RPC HTTP server is executed on every full node. The RPC methods are equivalent, but WebSockets allow realtime subscription to different events.")]),e._v(" "),n("p",[e._v("Note that Tendermint RPC is for internal use only, as it doesn’t support rate-limiting, authentication etc., so it shouldn’t be directly exposed to the internet.")]),e._v(" "),n("p",[e._v("At this moment, it’s also recommended to use "),n("code",[e._v("tendermint lite")]),e._v(" as a local proxy for the Chain client libraries when connecting to remote full nodes.")]),e._v(" "),n("p",[e._v("The Chain client interaction with Tendermint is currently done via a custom "),n("code",[e._v("client-rpc")]),e._v(" crate.")]),e._v(" "),n("p",[e._v("The main RPC methods are used "),n("code",[e._v("broadcast_tx_(a)sync")]),e._v(" and "),n("code",[e._v("abci_query")]),e._v(".")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("broadcast_tx_(a)sync")])])]),e._v(" "),n("tbody")]),e._v(" "),n("p",[e._v("This method takes “tx” parameter which is application-specific binary data (see "),n("a",{attrs:{href:"https://cryptocom-chain-documentation.readthedocs.io/en/latest/serialization.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("transaction serialization"),n("OutboundLink")],1),e._v(" for details on Chain binary format). The transaction binary payload is either hex-encoded (when called with the URI method) or base64-encoded (when called with JSON-RPC).")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("abci_query")])])]),e._v(" "),n("tbody")]),e._v(" "),n("p",[e._v("Currently the main usage is that given a path “account”, one can query the current “staked state” of some address (which is provided as the “data” field).")]),e._v(" "),n("h2",{attrs:{id:"app-hash"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#app-hash","aria-hidden":"true"}},[e._v("#")]),e._v(" APP HASH")]),e._v(" "),n("p",[e._v("Tendermint expects the ABCI application to be deterministic and consistency is checked that each instance, given the same input (block/consensus events + transaction data), updates its state in the same way and calculates the same “application hash” which is a compact representation of the overall ABCI application state.")]),e._v(" "),n("p",[e._v("In Chain, it is a Blake2s hash of several components:")]),e._v(" "),n("ul",[n("li",[e._v("root of a Merkle tree of a valid transactions in a given block")]),e._v(" "),n("li",[e._v("root of a sparse Merkle trie of staked states (see "),n("a",{attrs:{href:"https://cryptocom-chain-documentation.readthedocs.io/en/latest/account-utxo.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("accounting details"),n("OutboundLink")],1),e._v(")")]),e._v(" "),n("li",[e._v("binary serialized state of rewards pool (see "),n("a",{attrs:{href:"https://cryptocom-chain-documentation.readthedocs.io/en/latest/serialization.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("serialization"),n("OutboundLink")],1),e._v(" for details on Chain binary format and "),n("a",{attrs:{href:"https://cryptocom-chain-documentation.readthedocs.io/en/latest/genesis.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("genesis"),n("OutboundLink")],1),e._v(" for details on “state”)")])]),e._v(" "),n("h2",{attrs:{id:"conventions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conventions","aria-hidden":"true"}},[e._v("#")]),e._v(" Conventions")]),e._v(" "),n("p",[e._v("As "),n("a",{attrs:{href:"https://cryptocom-chain-documentation.readthedocs.io/en/latest/genesis.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("genesis"),n("OutboundLink")],1),e._v(" information is taken from the Ethereum network, the same address format is used (i.e. hexadecimal encoding of 20-bytes from a keccak-256 hash of a secp256k1 public key).")]),e._v(" "),n("p",[e._v("For Tendermint data, its conventions must be followed (e.g. validator keys are Ed25519, base64-encoded … “addresses” are the first 20 bytes of SHA256 of the raw public key bytes).")]),e._v(" "),n("p",[e._v("For Crypto.com Chain, it has the following conventions:")]),e._v(" "),n("ul",[n("li",[e._v("Chain-ID: this is a string in Tendermint’s genesis.json. In Crypto.com Chain, it should end with two hex digits.")]),e._v(" "),n("li",[e._v("Network-ID: a single byte determined by the two last hex digits of Chain-ID. It is included in metadata of every transaction")]),e._v(" "),n("li",[e._v("Transactions, addresses etc.: see transaction "),n("a",{attrs:{href:"https://cryptocom-chain-documentation.readthedocs.io/en/latest/serialization.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("binary serialization"),n("OutboundLink")],1),e._v(", "),n("a",{attrs:{href:"https://cryptocom-chain-documentation.readthedocs.io/en/latest/account-utxo.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("accounting model"),n("OutboundLink")],1),e._v(", "),n("a",{attrs:{href:"https://cryptocom-chain-documentation.readthedocs.io/en/latest/signature-schemes.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("addresses / witness"),n("OutboundLink")],1),e._v(" and "),n("a",{attrs:{href:"https://cryptocom-chain-documentation.readthedocs.io/en/latest/transaction.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("format / types"),n("OutboundLink")],1)])])])},[],!1,null,null,null);t.default=o.exports}}]);